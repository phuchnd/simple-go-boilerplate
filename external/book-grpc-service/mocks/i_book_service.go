// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/phuchnd/simple-go-boilerplate/server/grpc/pb"
	mock "github.com/stretchr/testify/mock"
)

// IBookService is an autogenerated mock type for the IBookService type
type IBookService struct {
	mock.Mock
}

// ListBooks provides a mock function with given fields: ctx, in
func (_m *IBookService) ListBooks(ctx context.Context, in *pb.ListBookRequest) (*pb.ListBookResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *pb.ListBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListBookRequest) (*pb.ListBookResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListBookRequest) *pb.ListBookResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListBookRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBookService creates a new instance of IBookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookService {
	mock := &IBookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
