// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gprc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductManagementServiceClient is the client API for ProductManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagementServiceClient interface {
	ListUnitOfMeasurements(ctx context.Context, in *ListUnitOfMeasurementsRequest, opts ...grpc.CallOption) (*ListUnitOfMeasurementsResponse, error)
}

type productManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagementServiceClient(cc grpc.ClientConnInterface) ProductManagementServiceClient {
	return &productManagementServiceClient{cc}
}

func (c *productManagementServiceClient) ListUnitOfMeasurements(ctx context.Context, in *ListUnitOfMeasurementsRequest, opts ...grpc.CallOption) (*ListUnitOfMeasurementsResponse, error) {
	out := new(ListUnitOfMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/product_management.ProductManagementService/ListUnitOfMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManagementServiceServer is the server API for ProductManagementService service.
// All implementations must embed UnimplementedProductManagementServiceServer
// for forward compatibility
type ProductManagementServiceServer interface {
	ListUnitOfMeasurements(context.Context, *ListUnitOfMeasurementsRequest) (*ListUnitOfMeasurementsResponse, error)
	mustEmbedUnimplementedProductManagementServiceServer()
}

// UnimplementedProductManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagementServiceServer struct {
}

func (UnimplementedProductManagementServiceServer) ListUnitOfMeasurements(context.Context, *ListUnitOfMeasurementsRequest) (*ListUnitOfMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnitOfMeasurements not implemented")
}
func (UnimplementedProductManagementServiceServer) mustEmbedUnimplementedProductManagementServiceServer() {
}

// UnsafeProductManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagementServiceServer will
// result in compilation errors.
type UnsafeProductManagementServiceServer interface {
	mustEmbedUnimplementedProductManagementServiceServer()
}

func RegisterProductManagementServiceServer(s grpc.ServiceRegistrar, srv ProductManagementServiceServer) {
	s.RegisterService(&ProductManagementService_ServiceDesc, srv)
}

func _ProductManagementService_ListUnitOfMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitOfMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServiceServer).ListUnitOfMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_management.ProductManagementService/ListUnitOfMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServiceServer).ListUnitOfMeasurements(ctx, req.(*ListUnitOfMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManagementService_ServiceDesc is the grpc.ServiceDesc for ProductManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_management.ProductManagementService",
	HandlerType: (*ProductManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUnitOfMeasurements",
			Handler:    _ProductManagementService_ListUnitOfMeasurements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
