// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	config "github.com/phuchnd/simple-go-boilerplate/internal/config"
	mock "github.com/stretchr/testify/mock"
)

// IConfig is an autogenerated mock type for the IConfig type
type IConfig struct {
	mock.Mock
}

// GetBookConfig provides a mock function with given fields:
func (_m *IConfig) GetBookConfig() *config.BookConfig {
	ret := _m.Called()

	var r0 *config.BookConfig
	if rf, ok := ret.Get(0).(func() *config.BookConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.BookConfig)
		}
	}

	return r0
}

// GetCronHealthCheckConfig provides a mock function with given fields:
func (_m *IConfig) GetCronHealthCheckConfig() *config.CronConfig {
	ret := _m.Called()

	var r0 *config.CronConfig
	if rf, ok := ret.Get(0).(func() *config.CronConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.CronConfig)
		}
	}

	return r0
}

// GetCronSimpleExampleConfig provides a mock function with given fields:
func (_m *IConfig) GetCronSimpleExampleConfig() *config.CronConfig {
	ret := _m.Called()

	var r0 *config.CronConfig
	if rf, ok := ret.Get(0).(func() *config.CronConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.CronConfig)
		}
	}

	return r0
}

// GetDBConfig provides a mock function with given fields:
func (_m *IConfig) GetDBConfig() *config.DBConfig {
	ret := _m.Called()

	var r0 *config.DBConfig
	if rf, ok := ret.Get(0).(func() *config.DBConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.DBConfig)
		}
	}

	return r0
}

// GetServerConfig provides a mock function with given fields:
func (_m *IConfig) GetServerConfig() *config.ServerConfig {
	ret := _m.Called()

	var r0 *config.ServerConfig
	if rf, ok := ret.Get(0).(func() *config.ServerConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServerConfig)
		}
	}

	return r0
}

// NewIConfig creates a new instance of IConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConfig {
	mock := &IConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
