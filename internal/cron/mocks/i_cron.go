// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	cron "github.com/robfig/cron/v3"

	mock "github.com/stretchr/testify/mock"
)

// ICron is an autogenerated mock type for the ICron type
type ICron struct {
	mock.Mock
}

// AddFunc provides a mock function with given fields: spec, cmd
func (_m *ICron) AddFunc(spec string, cmd func()) (cron.EntryID, error) {
	ret := _m.Called(spec, cmd)

	var r0 cron.EntryID
	var r1 error
	if rf, ok := ret.Get(0).(func(string, func()) (cron.EntryID, error)); ok {
		return rf(spec, cmd)
	}
	if rf, ok := ret.Get(0).(func(string, func()) cron.EntryID); ok {
		r0 = rf(spec, cmd)
	} else {
		r0 = ret.Get(0).(cron.EntryID)
	}

	if rf, ok := ret.Get(1).(func(string, func()) error); ok {
		r1 = rf(spec, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *ICron) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *ICron) Stop() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// NewICron creates a new instance of ICron. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICron(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICron {
	mock := &ICron{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
