// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/phuchnd/simple-go-boilerplate/internal/db/repositories/entities"
	mock "github.com/stretchr/testify/mock"
)

// IBookRepository is an autogenerated mock type for the IBookRepository type
type IBookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *IBookRepository) Create(ctx context.Context, data *entities.Book) (*entities.Book, error) {
	ret := _m.Called(ctx, data)

	var r0 *entities.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Book) (*entities.Book, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Book) *entities.Book); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Book) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBookRepository) GetByID(ctx context.Context, id entities.ID) (*entities.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ID) (*entities.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ID) *entities.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooks provides a mock function with given fields: ctx, limit, cursor, filter
func (_m *IBookRepository) ListBooks(ctx context.Context, limit int, cursor entities.ID, filter *entities.ListBookFilter) (*entities.BookPaginator, error) {
	ret := _m.Called(ctx, limit, cursor, filter)

	var r0 *entities.BookPaginator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entities.ID, *entities.ListBookFilter) (*entities.BookPaginator, error)); ok {
		return rf(ctx, limit, cursor, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, entities.ID, *entities.ListBookFilter) *entities.BookPaginator); ok {
		r0 = rf(ctx, limit, cursor, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BookPaginator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, entities.ID, *entities.ListBookFilter) error); ok {
		r1 = rf(ctx, limit, cursor, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBookRepository creates a new instance of IBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookRepository {
	mock := &IBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
